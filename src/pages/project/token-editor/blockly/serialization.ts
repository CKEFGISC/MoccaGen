/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import * as Blockly from "blockly/core";
import { invoke } from "@tauri-apps/api/tauri";
import { getConfigPath } from "../../../../utils/ConfigPathKeeper";

const storageKey = (Math.random() + 1).toString(36).substring(7);

/**
 * Saves the state of the workspace to browser's local storage.
 * @param workspace Blockly workspace to save.
 * @param subtask_key The key of the subtask to save. format: "subtask0", "subtask1", ...
 * @param subtask_content The content of the subtask to save.
 */
export const save = function (workspace: Blockly.Workspace, subtask_key: string, subtask_content: JSON) {
  const data = Blockly.serialization.workspaces.save(workspace);
  // console.error("save", subtask_key);
  invoke("save_blockly", {
    configPath: getConfigPath(),
    subtaskContent: JSON.stringify(subtask_content),
    blocklyStatus: JSON.stringify(data),
  });
  window.sessionStorage?.setItem(storageKey + subtask_key, JSON.stringify(data));
};

/**
 * Saves the code generated by the workspace to backend.
 * @param workspace Blockly workspace to save.
 * @param subtask_key The key of the subtask to save. format: "subtask0", "subtask1", ...
 * @param token The token from code generation of the subtask to save.
 */
export const saveCode = function (subtask_content: JSON, token: string) {
  invoke("save_token", {
    configPath: getConfigPath(),
    subtaskContent: JSON.stringify(subtask_content),
    token: token,
  });
};

/**
 * Loads saved state from local storage into the given workspace.
 * @param workspace Blockly workspace to load into.
 */
export const load = function (workspace: Blockly.Workspace, subtask_key: string, subtask_content: JSON) {
  // const data = window.sessionStorage?.getItem(storageKey + subtask_key);
  // if (!data) return;

  // // Don't emit events during loading.
  // Blockly.Events.disable();
  // Blockly.serialization.workspaces.load(JSON.parse(data as string), workspace, undefined);
  // Blockly.Events.enable();
  // return;

  invoke("load_blockly", {
    configPath: getConfigPath(),
    subtaskContent: JSON.stringify(subtask_content),
  })
    .then((data: string) => {
      if (!data) {
        return;
      }
      console.error("data", data);
      // Don't emit events during loading.
      Blockly.Events.disable();
      Blockly.serialization.workspaces.load(JSON.parse(data as string), workspace, undefined);
      Blockly.Events.enable();
    })
    .catch((e: string) => {
      console.error("API call failed:", e);
      return;
    });
};
